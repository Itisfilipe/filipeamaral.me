<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Filipe Amaral</title>
    <link>https://filipeamaral.me/tags/blog/</link>
    <description>Recent content in Blog on Filipe Amaral</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 11 Apr 2020 17:51:21 -0300</lastBuildDate>
    
	<atom:link href="https://filipeamaral.me/tags/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Intercepting Requests and Reponses With Django&#39;s Middleware ðŸ‘€</title>
      <link>https://filipeamaral.me/post/intercepting-requests-and-reponses-with-django-middleware/</link>
      <pubDate>Sat, 11 Apr 2020 17:51:21 -0300</pubDate>
      
      <guid>https://filipeamaral.me/post/intercepting-requests-and-reponses-with-django-middleware/</guid>
      <description>I have been working on an app where a user can have multiple projects, and all features should work against the currently selected project. I want to make the project automagically available to the views (all of them) without any hassle and one way to do that is by injecting the project into the request before they hit the view layer. In Django, we can easily accomplish this task by creating a custom middleware.</description>
    </item>
    
    <item>
      <title>AWS Lambda Best Practices ðŸ™Œ</title>
      <link>https://filipeamaral.me/post/aws-lambda-best-practices/</link>
      <pubDate>Tue, 28 Jan 2020 09:45:49 -0300</pubDate>
      
      <guid>https://filipeamaral.me/post/aws-lambda-best-practices/</guid>
      <description>Code optimizations that you should be aware from database import connect database_uri = &amp;#34;uri://database/&amp;#34; connection = connection(database_uri) def extract_name(): return event[&amp;#39;key&amp;#39;] def handler(event, context): &amp;#34;&amp;#34;&amp;#34;A handler that just does what must be done.&amp;#34;&amp;#34;&amp;#34; connection.call(extract_name(event)) There are a few things that you could do with your code that might improve lambda&amp;rsquo;s performance, and some of them are:
 Keep your declarations and instantiations outside the handler function. Lambda will declare/instantiate them once and recycle then in the subsequent invocations.</description>
    </item>
    
  </channel>
</rss>